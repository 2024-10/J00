<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Mandalart</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/base.css">
    <link rel="stylesheet" href="/css/viewMandalart.css">
    <link rel="stylesheet" href="/css/comment.css">
    <link rel="stylesheet" href="/css/calendar.css">
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            background-color: #F8F8E8;
            font-family: Arial, sans-serif;
        }

        #calendar {
            width: 100%;
            margin-top: 20px;
            display: flex;
            justify-content: center;
            /* 수평 중앙 정렬 */
            align-items: flex-end;
            /* 수직 아래 정렬 */
        }

        #details {
            display: none;
            background-color: #D3ECA7;
            padding: 20px;
            border-radius: 8px;
            width: 100%;
        }

        #details h3 {
            margin-top: 0;
        }

        .todo-tabs-container {
            overflow-x: auto;
            white-space: nowrap;
            padding-bottom: 10px;
            margin-bottom: 20px;
            border-bottom: 2px solid #ccc;
        }

        .todo-tab {
            display: inline-block;
            background-color: #ccc;
            border: 1px solid #bbb;
            border-bottom: none;
            padding: 10px 20px;
            cursor: pointer;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
            margin-right: 5px;
            margin-bottom: -2px;
        }

        .todo-tab.active {
            background-color: #ffffff;
            font-weight: bold;
            border-color: #ddd;
        }

        .checklist-container {
            display: none;
        }

        .checklist-container.active {
            display: block;
        }

        .checklist-item {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .checklist-item input {
            margin-right: 10px;
        }

        .todo-content {
            padding: 10px;
            background-color: #ffffff;
            border: 1px solid #ccc;
            border-radius: 5px;
            min-height: 100px;
        }

        .empty-message {
            text-align: center;
            color: #888;
            font-style: italic;
        }
    </style>
</head>

<body>
    <header id="main-header">
        <a href="/">
            <img src="/images/logo.svg" alt="logo" class="logo">
        </a>
        <nav id="main-navigation">
            <ul class="menu">
                <li class="menu-item"><button onclick="window.location.href='/mandalart'" class="nav-button active">My
                        Mandalart</button></li>
                <li class="menu-item"><button onclick="window.location.href='/share'" class="nav-button">Share</button>
                </li>
                <li class="menu-item"><button onclick="window.location.href='/profile'"
                        class="nav-button">Profile</button></li>
            </ul>
        </nav>
    </header>
    <h3>나의 만다라트</h3>
    <button onclick="window.location.href='/mandalart/change/<%= mandalart.mandalart_id %>'">수정</button>
    <div class="container">
        <div class="editContainer">
            <% tedolists.forEach((tedolist, index)=> { %>
                <input type="text" class="tedolist-detail-input" value="<%= tedolist.tedolist_detail %>" readonly />
                <input type="hidden" class="tedolist-number" value="<%= tedolist.tedolist_number %>" />
                <% if (checklists[tedolist.tedolist_number]) { %>
                    <ul class="checklist" id="checklist-<%= tedolist.tedolist_number %>" style="display:none;">
                        <% checklists[tedolist.tedolist_number].forEach(checklist=> { %>
                            <li>
                                <%= checklist.checklist_detail %>
                            </li>
                            <% }); %>
                    </ul>
                    <% } %>
                        <% }); %>
                            <div id="checklist-container">
                                <ul id="checklist-list"></ul>
                            </div>
        </div>
        <div id="mandalart-grid" class="mandalart grid-<%= mandalart.tedolist_count %>"></div>
        <!-- 댓글 표시 영역 -->
        <div id="comment-section">
            <h4>댓글 (<span id="comment-count">0</span>)</h4>
            <ul id="comment-list"></ul>
            <div id="new-comment-section">
                <textarea id="new-comment" placeholder="댓글을 입력하세요"></textarea>
                <button id="add-comment-button">댓글 작성</button>
            </div>
        </div>
        <div id="calendar"></div>
        <div id="details">
            <h3>Details for <span id="selected-date"></span></h3>
            <div class="todo-tabs-container" id="tedolist-tabs"></div>
            <div class="todo-content" id="checklist-content"></div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#calendar').fullCalendar({
                defaultView: 'month',
                dayClick: function (date, jsEvent, view) {
                    var selectedDate = date.format('YYYY-MM-DD');
                    $('#selected-date').text(selectedDate);
                    loadDetails(selectedDate);
                }
            });

            async function loadDetails(date) {
                const response = await fetch(`/calendar/details/${date}`);
                if (response.ok) {
                    const data = await response.json();
                    const tedolistTabsContainer = $('#tedolist-tabs');
                    const checklistContent = $('#checklist-content');

                    tedolistTabsContainer.html('');
                    checklistContent.html('');

                    if (data.tedolist.length > 0) {
                        data.tedolist.forEach((tedolist, index) => {
                            const tabId = `tab-${index}`;
                            const checklistId = `checklist-${index}`;
                            const isActive = index === 0 ? 'active' : '';

                            tedolistTabsContainer.append(`
                                <div class="todo-tab ${isActive}" id="${tabId}" data-checklist="${checklistId}">
                                    ${tedolist.detail}
                                </div>
                            `);

                            if (tedolist.checklists.length > 0) {
                                const checklistHTML = tedolist.checklists.map(checklist => `
                                    <div class="checklist-item">
                                        <input type="checkbox" ${checklist.is_checked ? 'checked' : ''}>
                                        <span>${checklist.detail}</span>
                                    </div>
                                `).join('');

                                checklistContent.append(`
                                    <div class="checklist-container ${isActive}" id="${checklistId}">
                                        ${checklistHTML}
                                    </div>
                                `);
                            } else {
                                checklistContent.append(`
                                    <div class="checklist-container ${isActive}" id="${checklistId}">
                                        <p class="empty-message">해당 날짜에는 체크리스트를 작성하지 않았습니다</p>
                                    </div>
                                `);
                            }
                        });

                        $('.todo-tab').click(function () {
                            const selectedTab = $(this);
                            const selectedChecklist = selectedTab.data('checklist');

                            $('.todo-tab').removeClass('active');
                            $('.checklist-container').removeClass('active');

                            selectedTab.addClass('active');
                            $(`#${selectedChecklist}`).addClass('active');
                        });
                    } else {
                        checklistContent.append('<p class="empty-message">해당 날짜에는 체크리스트를 작성하지 않았습니다</p>');
                    }

                    $('#details').show();
                } else {
                    console.error('Failed to load details');
                }
            }

            const mandalartId = '<%= mandalart.mandalart_id %>';

            document.addEventListener('DOMContentLoaded', () => {
                const container = document.querySelector('.mandalart');
                const centerGoal = '<%= mandalart.centerGoal %>';
                const tedolistCount = <%= mandalart.tedolist_count %>;

                if (container) {
                    if (tedolistCount > 0) {
                        generateMandalart(container, centerGoal, tedolistCount);
                        addCellClickHandlers(mandalartId);
                    }
                }

                loadComments(mandalartId);

                document.getElementById('add-comment-button').addEventListener('click', () => {
                    const commentDetail = document.getElementById('new-comment').value.trim();
                    if (commentDetail) {
                        addComment(mandalartId, commentDetail);
                    }
                });

                document.getElementById('new-comment').addEventListener('keydown', (event) => {
                    if (event.key === 'Enter') {
                        event.preventDefault();
                        const commentDetail = document.getElementById('new-comment').value.trim();
                        if (commentDetail) {
                            addComment(mandalartId, commentDetail);
                        }
                    }
                });
            });

            function generateMandalart(container, centerGoal, tedolistCount) {
                const mandalartGrid = document.createElement('div');
                mandalartGrid.classList.add('mandalart-grid');
                mandalartGrid.classList.add(`grid-${tedolistCount}`);
                mandalartGrid.style.display = 'grid';
                mandalartGrid.style.gridTemplateColumns = `repeat(${tedolistCount}, 1fr)`;
                mandalartGrid.style.gridTemplateRows = `repeat(${tedolistCount}, 1fr)`;
                mandalartGrid.style.gap = '5px';

                for (let row = 0; row < tedolistCount; row++) {
                    for (let col = 0; col < tedolistCount; col++) {
                        const cell = document.createElement('div');
                        cell.classList.add('mandalart-cell');
                        cell.dataset.row = row;
                        cell.dataset.col = col;

                        if (row === Math.floor(tedolistCount / 2) && col === Math.floor(tedolistCount / 2)) {
                            cell.textContent = centerGoal;
                            cell.classList.add('center-cell');
                        }

                        mandalartGrid.appendChild(cell);
                    }
                }

                container.appendChild(mandalartGrid);
            }

            function addCellClickHandlers(mandalartId) {
                const cells = document.querySelectorAll('.mandalart-cell');
                cells.forEach(cell => {
                    cell.addEventListener('click', async (event) => {
                        const row = event.currentTarget.dataset.row;
                        const col = event.currentTarget.dataset.col;

                        try {
                            const response = await fetch(`/mandalart/${mandalartId}/goal/${row}/${col}`);
                            if (response.ok) {
                                const data = await response.json();
                                if (data && data.goal) {
                                    alert(`Goal: ${data.goal}`);
                                } else {
                                    alert('No goal data available for this cell');
                                }
                            } else {
                                alert('Failed to fetch goal data');
                            }
                        } catch (error) {
                            console.error('Error fetching goal data:', error);
                            alert('Error fetching goal data');
                        }
                    });
                });
            }

            async function loadComments(mandalartId) {
                try {
                    const response = await fetch(`/mandalart/${mandalartId}/comments`);
                    if (response.ok) {
                        const comments = await response.json();
                        displayComments(comments);
                    } else {
                        console.error('Failed to load comments');
                    }
                } catch (error) {
                    console.error('Error loading comments:', error);
                }
            }

            function displayComments(comments) {
                const commentList = document.getElementById('comment-list');
                const commentCount = document.getElementById('comment-count');
                commentList.innerHTML = '';
                commentCount.textContent = comments.length;

                comments.forEach(comment => {
                    const listItem = document.createElement('li');
                    listItem.classList.add('comment-item');

                    const detailDiv = document.createElement('div');
                    detailDiv.classList.add('comment-detail');
                    detailDiv.textContent = comment.comment_detail;

                    const timestampDiv = document.createElement('div');
                    timestampDiv.classList.add('comment-timestamp');
                    timestampDiv.textContent = `작성 시간: ${comment.comment_timestamp}`;

                    listItem.appendChild(detailDiv);
                    listItem.appendChild(timestampDiv);
                    commentList.appendChild(listItem);
                });
            }

            async function addComment(mandalartId, commentDetail) {
                try {
                    const response = await fetch(`/mandalart/${mandalartId}/comments`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ comment_detail: commentDetail })
                    });

                    if (response.ok) {
                        const newComment = await response.json();
                        document.getElementById('new-comment').value = '';
                        loadComments(mandalartId);
                    } else {
                        console.error('Failed to add comment');
                    }
                } catch (error) {
                    console.error('Error adding comment:', error);
                }
            }
        });
    </script>
</body>

</html>