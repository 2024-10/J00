<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>J00% - View Mandalart</title>
    <link rel="stylesheet" href="/css/base.css">
    <link rel="stylesheet" href="/css/share_viewMandalart.css">

    <style>
        .cell.active {
            background-color: #F4FFE8 !important;
        }
        #checklist-container {
            display: none;
            margin-top: 20px;
        }
        #checklist-list {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <header id="main-header">
        <a href="/">
            <img src="/images/logo.svg" alt="logo" class="logo">
        </a>
        <nav id="main-navigation">
            <ul class="menu">
                <li class="menu-item"><button onclick="window.location.href='/mandalart'" class="nav-button">My Mandalart</button></li>
                <li class="menu-item"><button onclick="window.location.href='/share'" class="nav-button active">Share</button></li>
                <li class="menu-item"><button onclick="window.location.href='/profile'" class="nav-button">Profile</button></li>
            </ul>
        </nav>
    </header>
    
    <div class="container">
        <h3>유저의 만다라트</h3>
        <div id="mandalart-grid" class="mandalart grid"></div>
        <div id="checklist-container" class="container arr1-container" style="display:none;">
            <div class="editContainer">
                <ul id="checklist-list"></ul>
            </div>
        </div>
        
        <div id="comment-section">
            <h4>댓글</h4>
            <ul id="comment-list"></ul>
            
            <div id="new-comment-section">
                <textarea id="new-comment" placeholder="댓글을 입력하세요"></textarea>
                <button id="add-comment-button">댓글 작성</button>
            </div>
        </div>
    </div>
    
    <script>
        // Function to get URL parameter
        function getQueryParam(param) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(param);
        }

        document.addEventListener('DOMContentLoaded', async () => {
            const userId = getQueryParam('userId');
            if (!userId) {
                console.error('User ID not found in URL');
                return;
            }

            try {
                const response = await fetch(`/mandalart/userMandalart/${userId}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch mandalart');
                }
                const data = await response.json();
                displayMandalart(data);
                loadComments(data.mandalart.mandalart_id);
            } catch (error) {
                console.error('Error fetching mandalart:', error);
            }
        });

        function displayMandalart(data) {
            const { mandalart, tedolists, checklists } = data;
            const container = document.querySelector('.mandalart');
            const centerGoal = mandalart.centerGoal;
            const tedolistCount = mandalart.tedolist_count;

            if (container) {
                if (tedolistCount > 0) {
                    container.classList.add(`grid-${tedolistCount}`);
                    generateMandalart(container, centerGoal, tedolistCount, tedolists, checklists);
                    addCellClickHandlers(mandalart.mandalart_id);
                }
            }
        }

        function generateMandalart(container, centerGoal, numCells, tedolists, checklists) {
            const positions = getPositions(numCells);

            positions.forEach((pos, index) => {
                const cell = document.createElement('div');
                cell.classList.add('cell', pos);
                cell.dataset.position = pos;

                const inputDetail = tedolists[index]?.tedolist_detail;
                const inputNumber = tedolists[index]?.tedolist_number;

                if (inputDetail && inputNumber) {
                    const textDiv = document.createElement('div');
                    textDiv.classList.add('cell-text');
                    textDiv.innerText = inputDetail;
                    cell.dataset.tedolistNumber = inputNumber;
                    cell.dataset.hasTedolistDetail = "true";
                    cell.appendChild(textDiv);
                } else {
                    cell.dataset.hasTedolistDetail = "false";
                }

                container.appendChild(cell);
            });

            const centerCell = document.createElement('div');
            centerCell.classList.add('cell', 'center');
            centerCell.dataset.position = 'center';
            centerCell.innerText = centerGoal;
            container.appendChild(centerCell);
        }

        function getPositions(numCells) {
            switch (numCells) {
                case 2:
                    return ["left", "right"];
                case 3:
                    return ["left", "right", "down"];
                case 4:
                    return ["up", "left", "right", "down"];
                case 5:
                    return ["up", "left", "right", "down-left", "down-right"];
                case 6:
                    return ["up", "up-left", "up-right", "down", "down-left", "down-right"];
                case 7:
                    return ["up-left", "up-right", "left", "right", "down-left", "down", "down-right"];
                case 8:
                    return ["up-left", "up", "up-right", "left", "right", "down-left", "down", "down-right"];
                default:
                    return [];
            }
        }

        function addCellClickHandlers(mandalartId) {
            const cells = document.querySelectorAll('.mandalart .cell');
            cells.forEach(cell => {
                if (!cell.classList.contains('center')) {
                    cell.addEventListener('click', async (event) => {
                        if (cell.dataset.hasTedolistDetail === "true") {
                            cells.forEach(c => c.classList.remove('active'));
                            event.target.classList.add('active');
                            const tedolistNumber = event.target.dataset.tedolistNumber;
                            console.log(`Tedolist Number: ${tedolistNumber}`);
                            await loadChecklists(mandalartId, tedolistNumber);
                        } else {
                            document.querySelector('#checklist-container').style.display = 'none';
                        }
                    });
                }
            });
        }

        async function loadChecklists(mandalartId, tedolistNumber) {
            const response = await fetch(`/mandalart/checklists/${mandalartId}/${tedolistNumber}`);
            if (response.ok) {
                const checklists = await response.json();
                const checklistContainer = document.querySelector('#checklist-list');
                checklistContainer.innerHTML = '';
                console.log(`Checklists loaded for Tedolist Number: ${tedolistNumber}`, checklists);
                checklists.forEach(checklist => {
                    const li = document.createElement('li');
                    li.textContent = checklist.checklist_detail;
                    checklistContainer.appendChild(li);
                });
                document.querySelector('#checklist-container').style.display = 'block';
            }
        }

        async function loadComments(mandalartId) {
            const response = await fetch(`/comment/${mandalartId}`);
            if (response.ok) {
                const comments = await response.json();
                const commentList = document.getElementById('comment-list');
                commentList.innerHTML = '';
                comments.forEach(comment => {
                    const li = document.createElement('li');
                    li.className = 'comment-item';
                    li.innerHTML = `
                        <div class="comment-header">
                            <div class="comment-author">
                                <img src="/images/comment_user.svg" alt="profile">
                                <span class="comment-author-name">${comment.user_id}</span>
                            </div>
                            <span class="comment-date">${comment.date}</span>
                        </div>
                        <div class="comment-detail">${comment.comment_detail}</div>
                        <div class="comment-reactions">
                            ${generateReactionsHTML(comment)}
                        </div>
                        <button class="delete-comment-button" data-comment-id="${comment.comment_id}">삭제</button>
                    `;
                    li.querySelectorAll('.comment-reaction').forEach(reaction => {
                        reaction.addEventListener('click', async () => {
                            const emoji = reaction.dataset.emoji;
                            await incrementReaction(comment.comment_id, emoji);
                            const countSpan = reaction.querySelector('span');
                            countSpan.textContent = parseInt(countSpan.textContent) + 1;
                        });
                    });
                    li.querySelector('.delete-comment-button').addEventListener('click', async () => {
                        await deleteComment(comment.comment_id);
                        loadComments(mandalartId);
                    });
                    commentList.appendChild(li);
                });
            }
        }

        function generateReactionsHTML(comment) {
            const emojis = ['1', '2', '3', '4', '5'];
            return emojis.map(emoji => `
                <div class="comment-reaction" data-emoji="${emoji}">
                    <img src="/images/${emoji}.svg" alt="${emoji}">
                    <span>${comment[`imogi${emoji}count`] || 0}</span>
                </div>
            `).join('');
        }

        async function incrementReaction(commentId, emoji) {
            await fetch(`/comment/${commentId}/reaction`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ emoji })
            });
        }

        async function deleteComment(commentId) {
            await fetch(`/comment/${commentId}`, {
                method: 'DELETE'
            });
        }

        document.getElementById('add-comment-button').addEventListener('click', async () => {
            const newComment = document.getElementById('new-comment').value;
            if (newComment.trim() === '') return;

            const userId = getQueryParam('userId');
            const mandalartId = getQueryParam('mandalartId');

            await fetch(`/comment/${mandalartId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ userId, commentDetail: newComment })
            });

            document.getElementById('new-comment').value = '';
            loadComments(mandalartId);
        });
    </script>
</body>
</html>